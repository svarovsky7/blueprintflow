import { useState, useMemo, useCallback, useEffect } from 'react'
import {
  Table,
  Button,
  Select,
  Space,
  Upload,
  Checkbox,
  Modal,
  Typography,
  Drawer,
  List,
  Input,
  Badge,
  Popconfirm,
  Empty,
  Form,
  App,
  Radio,
  Tooltip,
} from 'antd'
import {
  UploadOutlined,
  SettingOutlined,
  InboxOutlined,
  FilterOutlined,
  CaretUpFilled,
  CaretDownFilled,
  PlusOutlined,
  EditOutlined,
  DeleteOutlined,
  SaveOutlined,
  CloseOutlined,
  CopyOutlined,
  ArrowDownOutlined,
  ArrowUpOutlined,
} from '@ant-design/icons'
import { useQuery, useQueryClient } from '@tanstack/react-query'
import type { ColumnsType } from 'antd/es/table'
import type { UploadFile } from 'antd/es/upload'
import * as XLSX from 'xlsx'
import FileUpload from '@/components/FileUpload'
import {
  documentationApi,
  type DocumentationTableRow,
  type DocumentationFilters,
  type DocumentationColumnSettings,
  type DocumentationImportRow,
  type DocumentationVersion,
  type ImportConflict,
  type ConflictResolution,
} from '@/entities/documentation'
import { documentationTagsApi } from '@/entities/documentation-tags'
import { supabase } from '@/lib/supabase'
import { useScale } from '@/shared/contexts/ScaleContext'
import { DOCUMENT_STAGES } from '@/shared/types'
import ConflictResolutionDialog from '@/components/ConflictResolutionDialog'

const { Text, Title } = Typography

type RowColor = '' | 'green' | 'yellow' | 'blue' | 'red'

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã –∏–∑ ISO –≤ DD.MM.YYYY
const formatDate = (isoDate: string | null | undefined): string => {
  if (!isoDate) return '-'
  try {
    const [year, month, day] = isoDate.split('-')
    return `${day}.${month}.${year}`
  } catch {
    return isoDate
  }
}

// Note: Color functionality is temporarily disabled until the 'color' column is added to the database
// const colorMap: Record<RowColor, string> = {
//   green: '#d9f7be',
//   yellow: '#fff1b8',
//   blue: '#e6f7ff',
//   red: '#ffa39e',
//   '': '',
// }

// –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤ –∏–∑ localStorage
const getColumnSettings = (): DocumentationColumnSettings => {
  const saved = localStorage.getItem('documentation_column_settings')
  if (saved) {
    try {
      return JSON.parse(saved)
    } catch {
      // Ignore parse errors
    }
  }
  return {
    visible: {
      tag: true,
      code: true,
      version_count: true,
      comments: true,
    },
    order: ['stage', 'tag', 'code', 'version', 'issue_date', 'file', 'comments', 'actions'],
  }
}


export default function Documentation() {
  const { message } = App.useApp()
  const { scale } = useScale()
  const queryClient = useQueryClient()
  const [filters, setFilters] = useState<DocumentationFilters>({})
  const [appliedFilters, setAppliedFilters] = useState<DocumentationFilters>({})
  const [filtersExpanded, setFiltersExpanded] = useState(true) // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç
  const [columnSettings] = useState<DocumentationColumnSettings>(getColumnSettings())
  const [settingsDrawerOpen, setSettingsDrawerOpen] = useState(false)
  const [importModalOpen, setImportModalOpen] = useState(false)
  const [fileList, setFileList] = useState<UploadFile[]>([])
  const [importLoading, setImportLoading] = useState(false)
  const [addMode, setAddMode] = useState(false)
  const [newRows, setNewRows] = useState<DocumentationTableRow[]>([])
  const [editingKey, setEditingKey] = useState<string | null>(null)
  const [selectedVersions, setSelectedVersions] = useState<Record<string, number>>({})
  const [importForm] = Form.useForm()
  const [importConflicts, setImportConflicts] = useState<ImportConflict[]>([])
  const [conflictDialogVisible, setConflictDialogVisible] = useState(false)
  const [pendingImportData, setPendingImportData] = useState<DocumentationImportRow[]>([])
  const [resolvingConflicts, setResolvingConflicts] = useState(false)
  const [importSelectedProjectId, setImportSelectedProjectId] = useState<string | null>(null)
  const [fileDuplicates, setFileDuplicates] = useState<Array<{
    key: string
    rows: DocumentationImportRow[]
    indices: number[]
  }>>([])
  const [duplicateDialogVisible, setDuplicateDialogVisible] = useState(false)
  const [selectedDuplicates, setSelectedDuplicates] = useState<Map<string, number>>(new Map())
  const [deleteMode, setDeleteMode] = useState(false)
  const [selectedRowsForDelete, setSelectedRowsForDelete] = useState<Set<string>>(new Set())
  const [pageSize, setPageSize] = useState(() => {
    const saved = localStorage.getItem('documentation_page_size')
    return saved ? parseInt(saved) : 100
  })
  const [editingRows, setEditingRows] = useState<Record<string, DocumentationTableRow>>({}) // –î–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  
  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–æ–ª–±—Ü–∞–º–∏
  const [columnVisibility, setColumnVisibility] = useState<Record<string, boolean>>({})
  const [columnOrder, setColumnOrder] = useState<string[]>([])
  
  // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–≤–æ–π–Ω–æ–≥–æ —Å–∫—Ä–æ–ª–ª–∞
  useEffect(() => {
    const checkScrollbars = () => {
      const body = document.body
      const html = document.documentElement
      const table = document.querySelector('.ant-table-wrapper')
      const tableContainer = document.querySelector('.ant-table-container')
      const tableBody = document.querySelector('.ant-table-body')
      const mainContent = document.querySelector('.ant-layout-content')
      
      console.log('üìä Documentation Scroll diagnostics:')
      console.log('Body height:', body.scrollHeight, 'Client height:', body.clientHeight)
      console.log('Body has scroll:', body.scrollHeight > body.clientHeight)
      console.log('HTML height:', html.scrollHeight, 'Client height:', html.clientHeight)
      console.log('HTML has scroll:', html.scrollHeight > html.clientHeight)
      console.log('Window inner height:', window.innerHeight)
      console.log('Document height:', document.documentElement.scrollHeight)
      
      if (mainContent) {
        console.log('Main content:', mainContent.scrollHeight, mainContent.clientHeight)
        console.log('Main content overflow:', window.getComputedStyle(mainContent).overflow)
      }
      
      if (table) {
        console.log('Table wrapper:', table.scrollHeight, table.clientHeight)
        const tableRect = table.getBoundingClientRect()
        console.log('Table position:', { top: tableRect.top, height: tableRect.height, bottom: tableRect.bottom })
      }
      if (tableContainer) {
        console.log('Table container:', tableContainer.scrollHeight, tableContainer.clientHeight)
      }
      if (tableBody) {
        console.log('Table body:', tableBody.scrollHeight, tableBody.clientHeight)
        console.log('Table body overflow:', window.getComputedStyle(tableBody).overflow)
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∏–ª–∏ overflow
      console.log('Body overflow:', window.getComputedStyle(body).overflow)
      console.log('HTML overflow:', window.getComputedStyle(html).overflow)
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å–æ —Å–∫—Ä–æ–ª–ª–æ–º
      const scrollableElements = Array.from(document.querySelectorAll('*')).filter(el => {
        const style = window.getComputedStyle(el)
        return (style.overflow === 'auto' || style.overflow === 'scroll' || 
                style.overflowY === 'auto' || style.overflowY === 'scroll') &&
                el.scrollHeight > el.clientHeight
      })
      console.log('Elements with scroll:', scrollableElements.length)
      scrollableElements.forEach(el => {
        console.log('Scrollable element:', el.className, el.scrollHeight, el.clientHeight)
      })
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ —Ä–µ–Ω–¥–µ—Ä–∞
    setTimeout(checkScrollbars, 500)
    window.addEventListener('resize', checkScrollbars)
    
    return () => window.removeEventListener('resize', checkScrollbars)
  }, [appliedFilters])

  // –§—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–æ–ª–±—Ü–∞–º–∏
  const toggleColumnVisibility = useCallback((key: string) => {
    setColumnVisibility(prev => ({
      ...prev,
      [key]: prev[key] === false ? true : false
    }))
  }, [])
  
  const selectAllColumns = useCallback((select: boolean, allColumnsData: Array<{key: string, title: string}>) => {
    const newVisibility: Record<string, boolean> = {}
    allColumnsData.forEach(col => {
      newVisibility[col.key] = select
    })
    setColumnVisibility(newVisibility)
  }, [])
  
  const resetToDefaults = useCallback((allColumnsData: Array<{key: string, title: string}>) => {
    // –°–±—Ä–æ—Å –≤–∏–¥–∏–º–æ—Å—Ç–∏ - –≤—Å–µ —Å—Ç–æ–ª–±—Ü—ã –≤–∏–¥–∏–º—ã
    const defaultVisibility: Record<string, boolean> = {}
    allColumnsData.forEach(col => {
      defaultVisibility[col.key] = true
    })
    setColumnVisibility(defaultVisibility)
    
    // –°–±—Ä–æ—Å –ø–æ—Ä—è–¥–∫–∞ - –∏—Å—Ö–æ–¥–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫
    setColumnOrder(allColumnsData.map(c => c.key))
    
    // –û—á–∏—Å—Ç–∫–∞ localStorage
    localStorage.removeItem('documentation-column-visibility')
    localStorage.removeItem('documentation-column-order')
  }, [])

  const moveColumn = useCallback((key: string, direction: 'up' | 'down') => {
    setColumnOrder(prev => {
      const currentIndex = prev.indexOf(key)
      if (currentIndex === -1) return prev
      
      const newOrder = [...prev]
      if (direction === 'up' && currentIndex > 0) {
        [newOrder[currentIndex], newOrder[currentIndex - 1]] = [newOrder[currentIndex - 1], newOrder[currentIndex]]
      } else if (direction === 'down' && currentIndex < prev.length - 1) {
        [newOrder[currentIndex], newOrder[currentIndex + 1]] = [newOrder[currentIndex + 1], newOrder[currentIndex]]
      }
      
      return newOrder
    })
  }, [])

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö - —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –ø—Ä–æ–µ–∫—Ç
  const { data: documentation = [], isLoading } = useQuery({
    queryKey: ['documentation', appliedFilters],
    queryFn: () => documentationApi.getDocumentation(appliedFilters),
    enabled: !!appliedFilters.project_id, // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –ø—Ä–æ–µ–∫—Ç
  })

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
  const { data: tags = [] } = useQuery({
    queryKey: ['documentation-tags'],
    queryFn: documentationTagsApi.getAll,
  })

  const { data: projects = [] } = useQuery({
    queryKey: ['projects'],
    queryFn: async () => {
      if (!supabase) return []
      const { data } = await supabase.from('projects').select('*').order('name')
      return data || []
    },
  })

  const { data: blocks = [] } = useQuery({
    queryKey: ['blocks', filters.project_id],
    queryFn: async () => {
      if (!supabase || !filters.project_id) return []
      // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Å–≤—è–∑–∏ –ø—Ä–æ–µ–∫—Ç-–±–ª–æ–∫
      const { data: projectBlocks } = await supabase
        .from('projects_blocks')
        .select('block_id')
        .eq('project_id', filters.project_id)
      
      if (!projectBlocks || projectBlocks.length === 0) return []
      
      // –ó–∞—Ç–µ–º –ø–æ–ª—É—á–∞–µ–º —Å–∞–º–∏ –±–ª–æ–∫–∏
      const blockIds = projectBlocks.map(pb => pb.block_id)
      const { data: blocksData } = await supabase
        .from('blocks')
        .select('*')
        .in('id', blockIds)
        .order('name')
      
      return blocksData || []
    },
    enabled: !!filters.project_id,
  })

  // –ó–∞–≥—Ä—É–∑–∫–∞ –±–ª–æ–∫–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –≤ –¥–∏–∞–ª–æ–≥–µ –∏–º–ø–æ—Ä—Ç–∞
  const { data: importBlocks = [] } = useQuery({
    queryKey: ['blocks', importSelectedProjectId],
    queryFn: async () => {
      if (!supabase || !importSelectedProjectId) return []
      // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Å–≤—è–∑–∏ –ø—Ä–æ–µ–∫—Ç-–±–ª–æ–∫
      const { data: projectBlocks } = await supabase
        .from('projects_blocks')
        .select('block_id')
        .eq('project_id', importSelectedProjectId)
      
      if (!projectBlocks || projectBlocks.length === 0) return []
      
      // –ó–∞—Ç–µ–º –ø–æ–ª—É—á–∞–µ–º —Å–∞–º–∏ –±–ª–æ–∫–∏
      const blockIds = projectBlocks.map(pb => pb.block_id)
      const { data: blocksData } = await supabase
        .from('blocks')
        .select('*')
        .in('id', blockIds)
        .order('name')
      
      return blocksData || []
    },
    enabled: !!importSelectedProjectId,
  })

  // –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏
  const handleCopyRow = useCallback((record: DocumentationTableRow) => {
      const newRow = {
      ...record,
      id: `new-${Date.now()}`,
      documentation_id: '', // –ü—É—Å—Ç–æ–π UUID –¥–ª—è –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π
      stage: record.stage || '–ü',
      project_code: `${record.project_code}_copy`,
      project_name: record.project_name,
      isNew: true,
      // –ü–æ–ª—è –¥–ª—è –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏ - –±–µ—Ä–µ–º –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏ –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      new_version_number: record.versions.length > 0 ? record.versions[record.versions.length - 1].version_number + 1 : 1,
      new_issue_date: '',
      new_file_url: '',
      new_status: 'not_filled' as DocumentationVersion['status'],
    }
    setNewRows(prev => [...prev, newRow])
    setAddMode(true)
  }, [])

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –ø–æ—Å–ª–µ —Ç–µ–∫—É—â–µ–π
  const handleAddRowAfter = useCallback((record: DocumentationTableRow) => {
    setNewRows(prev => {
      const index = prev.findIndex(r => r.id === record.id)
      const newRow: DocumentationTableRow = {
        id: `new-${Date.now()}`,
        documentation_id: '', // –ü—É—Å—Ç–æ–π UUID –¥–ª—è –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π
        stage: record.stage || '–ü',
        tag_id: null, // –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
        tag_name: record.tag_name,
        tag_number: record.tag_number,
        project_code: '',
        project_name: '',
        version_count: 0,
        versions: [],
        comments: '',
        project_id: record.project_id,
        block_id: record.block_id,
        color: '' as RowColor,
        isNew: true,
        // –ü–æ–ª—è –¥–ª—è –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏
        new_version_number: 1,
        new_issue_date: '',
        new_file_url: '',
        new_status: 'not_filled' as DocumentationVersion['status'],
      }
      const updated = [...prev]
      updated.splice(index + 1, 0, newRow)
      return updated
    })
  }, [])

  // –£–¥–∞–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
  const handleDeleteNew = useCallback((record: DocumentationTableRow) => {
    setNewRows(prev => {
      const updated = prev.filter(r => r.id !== record.id)
      if (updated.length === 0) {
        setAddMode(false)
      }
      return updated
    })
  }, [])

  // –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏
  const handleDelete = useCallback(async (record: DocumentationTableRow) => {
    if (record.documentation_id) {
      try {
        await documentationApi.deleteDocumentation(record.documentation_id)
        message.success('–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞')
        queryClient.invalidateQueries({ queryKey: ['documentation'] })
      } catch (error) {
        console.error('Delete error:', error)
        message.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏')
      }
    }
  }, [queryClient, message])

  // –ö–æ–ª–æ–Ω–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
  const columns = useMemo(() => {
    // –ß–µ–∫–±–æ–∫—Å –∫–æ–ª–æ–Ω–∫–∞ –¥–ª—è —Ä–µ–∂–∏–º–∞ —É–¥–∞–ª–µ–Ω–∏—è
    const checkboxColumn = deleteMode ? {
      title: '',
      dataIndex: 'checkbox',
      key: 'checkbox',
      width: 50,
      fixed: 'left' as const,
      render: (_: unknown, record: DocumentationTableRow) => (
        <Checkbox
          checked={selectedRowsForDelete.has(record.id)}
          onChange={() => {
            const newSelected = new Set(selectedRowsForDelete)
            if (newSelected.has(record.id)) {
              newSelected.delete(record.id)
            } else {
              newSelected.add(record.id)
            }
            setSelectedRowsForDelete(newSelected)
          }}
        />
      ),
      visible: true,
    } : null

    const allColumns: Array<ColumnsType<DocumentationTableRow>[number] & { visible?: boolean }> = [
      // –ö–æ–ª–æ–Ω–∫–∞ —Ü–≤–µ—Ç–∞ - –≤—Ä–µ–º–µ–Ω–Ω–æ —Å–∫—Ä—ã—Ç–∞ –¥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–ª–æ–Ω–∫–∏ –≤ –ë–î
      // TODO: —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–ª–æ–Ω–∫–∏ color –≤ –ë–î
      /*{
        title: '',
        key: 'color',
        width: 50,
        fixed: 'left',
        visible: true, // –í—Å–µ–≥–¥–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è
        render: (_, record: DocumentationTableRow) => (
          <RowColorPicker
            value={(record.color || '') as RowColor}
            onChange={(color) => handleColorChange(record, color)}
          />
        ),
      },*/
      {
        title: '–°—Ç–∞–¥–∏—è',
        dataIndex: 'stage',
        key: 'stage',
        width: 60,
        sorter: (a, b) => (a.stage || '–ü').localeCompare(b.stage || '–ü'),
        filters: [
          { text: '–ü', value: '–ü' },
          { text: '–†', value: '–†' },
        ],
        onFilter: (value, record) => record.stage === value,
        render: (_, record: DocumentationTableRow) => {
          if (record.isNew) {
            return (
              <Select
                size="small"
                style={{ width: '100%' }}
                value={record.stage || '–ü'}
                onChange={(value) => {
                  const updated = newRows.map(r => 
                    r.id === record.id 
                      ? { ...r, stage: value }
                      : r
                  )
                  setNewRows(updated)
                }}
                options={[
                  { label: '–ü', value: '–ü' },
                  { label: '–†', value: '–†' },
                ]}
              />
            )
          }
          return record.stage || '–ü'
        },
        visible: true,
      },
      {
        title: '–†–∞–∑–¥–µ–ª',
        dataIndex: 'tag_name',
        key: 'tag',
        width: 100,
        sorter: (a, b) => a.tag_name.localeCompare(b.tag_name),
        filters: tags.map(t => ({ text: t.name, value: t.name })),
        onFilter: (value, record) => record.tag_name === value,
        visible: columnSettings.visible.tag,
        render: (text, record: DocumentationTableRow) => {
          if (record.isNew) {
            return (
              <Select
                style={{ width: '100%' }}
                placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª"
                value={text}
                onChange={(value) => {
                  const tag = tags.find(t => t.name === value)
                  const updated = newRows.map(r => 
                    r.id === record.id 
                      ? { ...r, tag_name: value, tag_number: tag?.tag_number || 0 }
                      : r
                  )
                  setNewRows(updated)
                }}
                options={tags.map(t => ({ label: t.name, value: t.name }))}
              />
            )
          }
          if (editingKey === record.id || editingRows[record.id]) {
            const editedRow = editingRows[record.id] || record
            return (
              <Select
                style={{ width: '100%' }}
                value={editedRow.tag_name}
                onChange={(value) => {
                  const tag = tags.find(t => t.name === value)
                  setEditingRows(prev => ({
                    ...prev,
                    [record.id]: {
                      ...editedRow,
                      tag_name: value,
                      tag_number: tag?.tag_number || 0
                    }
                  }))
                }}
                options={tags.map(t => ({ label: t.name, value: t.name }))}
              />
            )
          }
          return text
        },
      },
      {
        title: '–®–∏—Ñ—Ä –ø—Ä–æ–µ–∫—Ç–∞',
        dataIndex: 'project_code',
        key: 'code',
        width: 160,
        sorter: (a, b) => a.project_code.localeCompare(b.project_code),
        filterDropdown: ({ setSelectedKeys, selectedKeys, confirm, clearFilters }) => (
          <div style={{ padding: 8 }}>
            <Input
              placeholder="–ü–æ–∏—Å–∫ –ø–æ —à–∏—Ñ—Ä—É"
              value={selectedKeys[0]}
              onChange={e => setSelectedKeys(e.target.value ? [e.target.value] : [])}
              onPressEnter={() => confirm()}
              style={{ marginBottom: 8, display: 'block' }}
            />
            <Space>
              <Button
                type="primary"
                onClick={() => confirm()}
                icon={<FilterOutlined />}
                size="small"
                style={{ width: 90 }}
              >
                –ü–æ–∏—Å–∫
              </Button>
              <Button onClick={() => clearFilters && clearFilters()} size="small" style={{ width: 90 }}>
                –°–±—Ä–æ—Å
              </Button>
            </Space>
          </div>
        ),
        onFilter: (value, record) => {
          if (typeof value === 'string') {
            return record.project_code.toLowerCase().includes(value.toLowerCase())
          }
          return false
        },
        visible: columnSettings.visible.code,
        render: (text, record: DocumentationTableRow) => {
          if (record.isNew || editingKey === record.id || editingRows[record.id]) {
            const editedRow = editingRows[record.id] || record
            return (
              <Input
                value={record.isNew ? text : editedRow.project_code}
                onChange={(e) => {
                  if (record.isNew) {
                    const updated = newRows.map(r => 
                      r.id === record.id 
                        ? { ...r, project_code: e.target.value }
                        : r
                    )
                    setNewRows(updated)
                  } else {
                    setEditingRows(prev => ({
                      ...prev,
                      [record.id]: {
                        ...editedRow,
                        project_code: e.target.value
                      }
                    }))
                  }
                }}
                placeholder="–í–≤–µ–¥–∏—Ç–µ —à–∏—Ñ—Ä –ø—Ä–æ–µ–∫—Ç–∞"
              />
            )
          }
          return text
        },
      },
      {
        title: '–í–µ—Ä—Å–∏—è',
        key: 'version',
        width: 100,
        sorter: (a, b) => {
          const aVersion = a.selected_version || a.versions[0]?.version_number || 0
          const bVersion = b.selected_version || b.versions[0]?.version_number || 0
          return aVersion - bVersion
        },
        render: (_, record: DocumentationTableRow) => {
          if (record.isNew) {
            return (
              <Input
                type="number"
                min={1}
                size="small"
                value={record.new_version_number}
                onChange={(e) => {
                  const updated = newRows.map(r => 
                    r.id === record.id 
                      ? { ...r, new_version_number: parseInt(e.target.value) || 1 }
                      : r
                  )
                  setNewRows(updated)
                }}
                placeholder="1"
              />
            )
          }
          
          if (record.versions.length === 0) {
            return '-'
          }
          
          const currentSelectedVersion = selectedVersions[record.id] || 
            record.selected_version || 
            record.versions[record.versions.length - 1]?.version_number
          
          return (
            <Select
              size="small"
              value={currentSelectedVersion}
              onChange={(value) => {
                setSelectedVersions(prev => ({
                  ...prev,
                  [record.id]: value
                }))
              }}
              style={{ width: '100%' }}
              options={record.versions.map(v => ({
                label: v.version_number.toString(),
                value: v.version_number,
              }))}
            />
          )
        },
        visible: columnVisibility.version !== false,
      },
      {
        title: '–î–∞—Ç–∞ –≤—ã–¥–∞—á–∏',
        key: 'issue_date',
        width: 100,
        sorter: (a, b) => {
          const aDate = a.versions.find(v => v.version_number === (a.selected_version || a.versions[0]?.version_number))?.issue_date || ''
          const bDate = b.versions.find(v => v.version_number === (b.selected_version || b.versions[0]?.version_number))?.issue_date || ''
          return aDate.localeCompare(bDate)
        },
        render: (_, record: DocumentationTableRow) => {
          if (record.isNew) {
            return (
              <Input
                type="date"
                size="small"
                value={record.new_issue_date}
                onChange={(e) => {
                  const updated = newRows.map(r => 
                    r.id === record.id 
                      ? { ...r, new_issue_date: e.target.value }
                      : r
                  )
                  setNewRows(updated)
                }}
              />
            )
          }
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞—Ç—É –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –≤–µ—Ä—Å–∏–∏ –µ—Å–ª–∏ –≤—Å–µ –≤–µ—Ä—Å–∏–∏ –∏–º–µ—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä
          let selectedVersion: DocumentationVersion | undefined
          
          if (record.selected_version_id && record.versions.every(v => v.version_number === 1)) {
            // –í—Å–µ –≤–µ—Ä—Å–∏–∏ –∏–º–µ—é—Ç –Ω–æ–º–µ—Ä 1, –∏—Å–ø–æ–ª—å–∑—É–µ–º ID
            selectedVersion = record.versions.find(v => v.id === record.selected_version_id)
          } else {
            // –û–±—ã—á–Ω—ã–π —Å–ª—É—á–∞–π - –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–º–µ—Ä –≤–µ—Ä—Å–∏–∏
            const versionNumber = selectedVersions[record.id] || 
              record.selected_version || 
              record.versions[record.versions.length - 1]?.version_number
            selectedVersion = record.versions.find(v => v.version_number === versionNumber)
          }
          
          // Debug –¥–ª—è –ø–µ—Ä–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π
          if (record.project_code && record.project_code.startsWith('–°–¢26/01-14-–ê–†')) {
            console.log('Date render debug:', {
              code: record.project_code,
              selectedVersionId: record.selected_version_id,
              selectedVersion,
              date: selectedVersion?.issue_date
            })
          }
          
          return formatDate(selectedVersion?.issue_date)
        },
        visible: columnVisibility.issue_date !== false,
      },
      {
        title: '–§–∞–π–ª',
        key: 'file',
        width: 100,
        filters: [
          { text: '–ï—Å—Ç—å —Ñ–∞–π–ª', value: 'has_file' },
          { text: '–ù–µ—Ç —Ñ–∞–π–ª–∞', value: 'no_file' },
        ],
        onFilter: (value, record) => {
          const selectedVersion = record.versions.find(v => v.version_number === (record.selected_version || record.versions[0]?.version_number))
          const hasFile = !!selectedVersion?.file_url
          return value === 'has_file' ? hasFile : !hasFile
        },
        render: (_, record: DocumentationTableRow) => {
          if (record.isNew) {
            return (
              <Input
                size="small"
                value={record.new_file_url || ''}
                onChange={(e) => {
                  const updated = newRows.map(r => 
                    r.id === record.id 
                      ? { ...r, new_file_url: e.target.value }
                      : r
                  )
                  setNewRows(updated)
                }}
                placeholder="–°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–∞–π–ª"
              />
            )
          }
          
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –≤–µ—Ä—Å–∏–∏ –µ—Å–ª–∏ –≤—Å–µ –≤–µ—Ä—Å–∏–∏ –∏–º–µ—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä
          let selectedVersion: DocumentationVersion | undefined
          
          if (record.selected_version_id && record.versions.every(v => v.version_number === 1)) {
            // –í—Å–µ –≤–µ—Ä—Å–∏–∏ –∏–º–µ—é—Ç –Ω–æ–º–µ—Ä 1, –∏—Å–ø–æ–ª—å–∑—É–µ–º ID
            selectedVersion = record.versions.find(v => v.id === record.selected_version_id)
          } else {
            // –û–±—ã—á–Ω—ã–π —Å–ª—É—á–∞–π - –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–º–µ—Ä –≤–µ—Ä—Å–∏–∏
            const versionNumber = selectedVersions[record.id] || 
              record.selected_version || 
              record.versions[record.versions.length - 1]?.version_number
            selectedVersion = record.versions.find(v => v.version_number === versionNumber)
          }

          return (
              <FileUpload
              files={selectedVersion?.local_files || []}
              onChange={async (files) => {
                if (selectedVersion) {
                  try {
                    await documentationApi.updateVersionLocalFiles(selectedVersion.id, files)
                    queryClient.invalidateQueries({ queryKey: ['documentation'] })
                  } catch (error) {
                    console.error('Failed to update files:', error)
                    message.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ñ–∞–π–ª—ã')
                  }
                }
              }}
              disabled={false}

              projectName={record.project_name}
              sectionName={record.tag_name}
              documentationCode={record.project_code}

              onlineFileUrl={selectedVersion?.file_url || undefined}
            />
          )
        },
        visible: columnVisibility.file !== false,
      },
      {
        title: '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏',
        dataIndex: 'comments',
        key: 'comments',
        width: 200,
        render: (text, record: DocumentationTableRow) => (
          <Input.TextArea
            value={text}
            placeholder="–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π..."
            autoSize={{ minRows: 1, maxRows: 2 }}
            onChange={(e) => {
              if (record.isNew) {
                const updated = newRows.map(r => 
                  r.id === record.id 
                    ? { ...r, comments: e.target.value }
                    : r
                )
                setNewRows(updated)
              }
            }}
          />
        ),
        visible: columnSettings.visible.comments,
      },
      {
        title: '–î–µ–π—Å—Ç–≤–∏—è',
        key: 'actions',
        width: 150,
        fixed: 'right',
        visible: true, // –í—Å–µ–≥–¥–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è
        render: (_, record: DocumentationTableRow) => {
          if (record.isNew) {
            return (
              <Space size="small">
                <Button
                  type="text"
                  size="small"
                  icon={<ArrowDownOutlined />}
                  onClick={() => handleAddRowAfter(record)}
                  title="–î–æ–±–∞–≤–∏—Ç—å —Å—Ç—Ä–æ–∫—É –Ω–∏–∂–µ"
                />
                <Button
                  type="text"
                  size="small"
                  icon={<CopyOutlined />}
                  onClick={() => handleCopyRow(record)}
                  title="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–∫—É"
                />
                <Button
                  type="text"
                  size="small"
                  danger
                  icon={<DeleteOutlined />}
                  onClick={() => handleDeleteNew(record)}
                  title="–£–¥–∞–ª–∏—Ç—å —Å—Ç—Ä–æ–∫—É"
                />
              </Space>
            )
          }
          
          if (editingKey === record.id || editingRows[record.id]) {
            return (
              <Space size="small">
                <Button
                  type="text"
                  size="small"
                  icon={<SaveOutlined />}
                  onClick={async () => {
                    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                    const editedRow = editingRows[record.id]
                    if (editedRow) {
                      try {
                        // TODO: –î–æ–±–∞–≤–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ API
                        message.success('–ó–∞–ø–∏—Å—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞')
                        setEditingRows(prev => {
                          const newRows = { ...prev }
                          delete newRows[record.id]
                          return newRows
                        })
                        queryClient.invalidateQueries({ queryKey: ['documentation'] })
                      } catch {
                        message.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏')
                      }
                    }
                    setEditingKey(null)
                  }}
                />
                <Button
                  type="text"
                  size="small"
                  danger
                  icon={<CloseOutlined />}
                  onClick={() => {
                    setEditingRows(prev => {
                      const newRows = { ...prev }
                      delete newRows[record.id]
                      return newRows
                    })
                    setEditingKey(null)
                  }}
                />
              </Space>
            )
          }

          return (
            <Space size="small">
              <Button
                type="text"
                size="small"
                icon={<CopyOutlined />}
                onClick={() => handleCopyRow(record)}
                title="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–∫—É"
              />
              <Button
                type="text"
                size="small"
                icon={<EditOutlined />}
                onClick={() => {
                  setEditingKey(record.id)
                  setEditingRows(prev => ({
                    ...prev,
                    [record.id]: { ...record }
                  }))
                }}
              />
              <Popconfirm
                title="–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å?"
                description="–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∑–∞–ø–∏—Å—å?"
                onConfirm={() => handleDelete(record)}
                okText="–î–∞"
                cancelText="–û—Ç–º–µ–Ω–∞"
              >
                <Button
                  type="text"
                  size="small"
                  danger
                  icon={<DeleteOutlined />}
                  title="–£–¥–∞–ª–∏—Ç—å"
                />
              </Popconfirm>
            </Space>
          )
        },
      },
    ]

    // –§–∏–ª—å—Ç—Ä—É–µ–º –∏ —É–ø–æ—Ä—è–¥–æ—á–∏–≤–∞–µ–º —Å—Ç–æ–ª–±—Ü—ã —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
    const orderedColumns = columnOrder.length > 0 ? 
      columnOrder
        .filter(key => {
          // –°–ª—É–∂–µ–±–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã –Ω–µ —É–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –ø–æ—Ä—è–¥–∫–æ–º
          if (key === 'checkbox' || key === 'actions') return false
          return columnVisibility[key] !== false
        })
        .map(key => allColumns.find(col => col.key === key))
        .filter(Boolean) 
      : allColumns.filter(col => col.visible !== false)

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã –≤ –∫–æ–Ω—Ü–µ
    const actionColumn = allColumns.find(col => col.key === 'actions')
    const visibleColumns = actionColumn ? [...orderedColumns, actionColumn] : orderedColumns
    
    // –î–æ–±–∞–≤–ª—è–µ–º checkbox –∫–æ–ª–æ–Ω–∫—É –≤ –Ω–∞—á–∞–ª–æ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º —É–¥–∞–ª–µ–Ω–∏—è
    const finalColumns = checkboxColumn ? [checkboxColumn, ...visibleColumns] : visibleColumns
    
    // –£–¥–∞–ª—è–µ–º —Å–≤–æ–π—Å—Ç–≤–æ visible –ø–µ—Ä–µ–¥ –≤–æ–∑–≤—Ä–∞—Ç–æ–º
    return (finalColumns as Array<ColumnsType<DocumentationTableRow>[number] & { visible?: boolean }>).map((col) => {
      const { visible, ...rest } = col
      void visible
      return rest
    }) as ColumnsType<DocumentationTableRow>
  }, [columnSettings, newRows, editingKey, editingRows, tags, selectedVersions, handleAddRowAfter, handleCopyRow, handleDeleteNew, handleDelete, deleteMode, selectedRowsForDelete, message, queryClient, columnVisibility, columnOrder])

  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
  const allColumnsForSettings = useMemo(() => {
    const baseColumns = [
      { key: 'stage', title: '–°—Ç–∞–¥–∏—è' },
      { key: 'tag', title: '–†–∞–∑–¥–µ–ª' },
      { key: 'code', title: '–®–∏—Ñ—Ä –ø—Ä–æ–µ–∫—Ç–∞' },
      { key: 'version', title: '–í–µ—Ä—Å–∏—è' },
      { key: 'file', title: '–§–∞–π–ª' },
      { key: 'project', title: '–ü—Ä–æ–µ–∫—Ç' },
      { key: 'block', title: '–ö–æ—Ä–ø—É—Å' },
      { key: 'status', title: '–°—Ç–∞—Ç—É—Å' },
      { key: 'issue_date', title: '–î–∞—Ç–∞ –≤—ã–¥–∞—á–∏' },
      { key: 'comments', title: '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏' },
    ]
    return baseColumns
  }, [])

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å—Ç–æ–ª–±—Ü–æ–≤
  useEffect(() => {
    const savedVisibility = localStorage.getItem('documentation-column-visibility')
    const savedOrder = localStorage.getItem('documentation-column-order')
    
    if (savedVisibility && Object.keys(columnVisibility).length === 0) {
      try {
        const parsed = JSON.parse(savedVisibility)
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–æ–≤—ã–µ —Å—Ç–æ–ª–±—Ü—ã, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
        const updatedVisibility = { ...parsed }
        allColumnsForSettings.forEach(col => {
          if (!(col.key in updatedVisibility)) {
            updatedVisibility[col.key] = true // –ù–æ–≤—ã–µ —Å—Ç–æ–ª–±—Ü—ã –≤–∏–¥–∏–º—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
          }
        })
        setColumnVisibility(updatedVisibility)
      } catch (error) {
        console.error('Error loading column visibility:', error)
        // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        const defaultVisibility: Record<string, boolean> = {}
        allColumnsForSettings.forEach(col => {
          defaultVisibility[col.key] = true
        })
        setColumnVisibility(defaultVisibility)
      }
    } else if (Object.keys(columnVisibility).length === 0) {
      const initialVisibility: Record<string, boolean> = {}
      allColumnsForSettings.forEach(col => {
        initialVisibility[col.key] = true
      })
      setColumnVisibility(initialVisibility)
    }
    
    if (savedOrder && columnOrder.length === 0) {
      try {
        const parsed = JSON.parse(savedOrder)
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å—Ç–æ–ª–±—Ü—ã, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        const existingKeys = new Set(parsed)
        const newColumns = allColumnsForSettings.filter(col => !existingKeys.has(col.key))
        const updatedOrder = [...parsed, ...newColumns.map(col => col.key)]
        
        // –£–±–∏—Ä–∞–µ–º —Å—Ç–æ–ª–±—Ü—ã, –∫–æ—Ç–æ—Ä—ã–µ –±–æ–ª—å—à–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        const validKeys = new Set(allColumnsForSettings.map(col => col.key))
        const filteredOrder = updatedOrder.filter(key => validKeys.has(key))
        
        setColumnOrder(filteredOrder)
      } catch (error) {
        console.error('Error loading column order:', error)
        setColumnOrder(allColumnsForSettings.map(c => c.key))
      }
    } else if (columnOrder.length === 0) {
      setColumnOrder(allColumnsForSettings.map(c => c.key))
    }
  }, [allColumnsForSettings, columnVisibility, columnOrder])
  
  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ localStorage –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
  useEffect(() => {
    if (Object.keys(columnVisibility).length > 0) {
      localStorage.setItem('documentation-column-visibility', JSON.stringify(columnVisibility))
    }
  }, [columnVisibility])
  
  useEffect(() => {
    if (columnOrder.length > 0) {
      localStorage.setItem('documentation-column-order', JSON.stringify(columnOrder))
    }
  }, [columnOrder])

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ Excel
  const handleImportExcel = async () => {
    try {
      const values = await importForm.validateFields()
      
      if (fileList.length === 0) {
        message.error('–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞')
        return
      }

      setImportLoading(true)
      const file = fileList[0].originFileObj

      const arrayBuffer = await file!.arrayBuffer()
      const workbook = XLSX.read(arrayBuffer, { 
        type: 'array',
        cellDates: false, // –ù–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞—Ç—å –¥–∞—Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        dateNF: 'dd.mm.yyyy' // –§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      })
      const sheetName = workbook.SheetNames[0]
      const worksheet = workbook.Sheets[sheetName]
      const jsonData = XLSX.utils.sheet_to_json(worksheet, {
        raw: true, // –ü–æ–ª—É—á–∞—Ç—å —Å—ã—Ä—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (—á–∏—Å–ª–∞ –¥–ª—è –¥–∞—Ç)
        defval: undefined // –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –ø—É—Å—Ç—ã—Ö —è—á–µ–µ–∫
      })

      // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è Excel serial date –≤ —Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD
      const excelDateToISO = (excelDate: string | number | undefined): string | undefined => {
        if (!excelDate) return undefined
        
        // –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ —Å—Ç—Ä–æ–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–∞—Ç—ã (DD.MM.YYYY), –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –µ—ë
        if (typeof excelDate === 'string' && excelDate.includes('.')) {
          const [day, month, year] = excelDate.split('.')
          if (day && month && year) {
            return `${year}-${month.padStart(2, '0')}-${day.padStart(2, '0')}`
          }
        }
        
        // –ï—Å–ª–∏ —ç—Ç–æ —á–∏—Å–ª–æ (Excel serial date)
        const serialDate = typeof excelDate === 'string' ? parseFloat(excelDate) : excelDate
        if (!isNaN(serialDate)) {
          // Excel's date system: January 1, 1900 is serial date 1
          // Excel incorrectly treats 1900 as a leap year, so we need to adjust
          let adjustedDate = serialDate
          
          // Adjust for Excel's leap year bug (for dates after Feb 28, 1900)
          // Excel serial date 60 = Feb 29, 1900 (which doesn't exist)
          // So for serial dates > 60, we subtract 1
          if (serialDate > 60) {
            adjustedDate = serialDate - 1
          }
          
          // Create date from Excel serial number
          // Excel date 1 = Jan 1, 1900, but JS Date needs milliseconds since Jan 1, 1970
          // Days between Jan 1, 1900 and Jan 1, 1970 = 25567
          const jsDate = new Date((adjustedDate - 25567) * 86400 * 1000)
          
          // Adjust for timezone offset to get the correct date
          const utcDate = new Date(jsDate.getTime() + jsDate.getTimezoneOffset() * 60000)
          
          const year = utcDate.getFullYear()
          const month = String(utcDate.getMonth() + 1).padStart(2, '0')
          const day = String(utcDate.getDate()).padStart(2, '0')
          
          return `${year}-${month}-${day}`
        }
        
        return undefined
      }

      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å —É—á–µ—Ç–æ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –∏ —Å—Ç–∞–¥–∏–∏
      const importData: DocumentationImportRow[] = (jsonData as Record<string, string | number | undefined>[]).map((row, index) => {
        const processedRow = {
          tag: (row['–†–∞–∑–¥–µ–ª'] || '').toString().trim(),
          code: (row['–®–∏—Ñ—Ä –ø—Ä–æ–µ–∫—Ç–∞'] || row['–®–∏—Ñ—Ä'] || '').toString().trim(),
          version_number: parseInt((row['–ù–æ–º–µ—Ä –≤–µ—Ä—Å–∏–∏'] || row['–í–µ—Ä—Å–∏—è'] || '1').toString()),
          issue_date: excelDateToISO(row['–î–∞—Ç–∞ –≤—ã–¥–∞—á–∏ –≤–µ—Ä—Å–∏–∏'] || row['–î–∞—Ç–∞ –≤—ã–¥–∞—á–∏']),
          file_url: (row['–°—Å—ã–ª–∫–∞'] || row['–°—Å—ã–ª–∫–∞ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç'] || '').toString().trim() || undefined,
          project_id: values.project_id,
          block_id: values.block_id, // –î–æ–±–∞–≤–ª—è–µ–º block_id –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω
          stage: values.stage,
        }
        
        // –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        if (index < 3) {
          console.log(`Row ${index + 1}:`, {
            raw_date_value: row['–î–∞—Ç–∞ –≤—ã–¥–∞—á–∏ –≤–µ—Ä—Å–∏–∏'] || row['–î–∞—Ç–∞ –≤—ã–¥–∞—á–∏'],
            date_type: typeof (row['–î–∞—Ç–∞ –≤—ã–¥–∞—á–∏ –≤–µ—Ä—Å–∏–∏'] || row['–î–∞—Ç–∞ –≤—ã–¥–∞—á–∏']),
            converted_date: processedRow.issue_date,
            raw_url_value: row['–°—Å—ã–ª–∫–∞'] || row['–°—Å—ã–ª–∫–∞ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç'],
            file_url: processedRow.file_url,
            all_fields: Object.keys(row)
          })
        }
        
        return processedRow
      })

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã –≤–Ω—É—Ç—Ä–∏ —Ñ–∞–π–ª–∞ –∏–º–ø–æ—Ä—Ç–∞
      const duplicatesMap = new Map<string, { rows: DocumentationImportRow[], indices: number[] }>()
      importData.forEach((row, index) => {
        const key = `${row.code}_${row.version_number}`
        if (!duplicatesMap.has(key)) {
          duplicatesMap.set(key, { rows: [], indices: [] })
        }
        const entry = duplicatesMap.get(key)!
        entry.rows.push(row)
        entry.indices.push(index)
      })

      // –ù–∞—Ö–æ–¥–∏–º –¥—É–±–ª–∏–∫–∞—Ç—ã (–≥–¥–µ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º code + version)
      const fileDuplicates = Array.from(duplicatesMap.entries())
        .filter(([, entry]) => entry.rows.length > 1)
        .map(([key, entry]) => ({
          key,
          rows: entry.rows,
          indices: entry.indices
        }))

      if (fileDuplicates.length > 0) {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        setFileDuplicates(fileDuplicates)
        setPendingImportData(importData)
        setDuplicateDialogVisible(true)
        setImportLoading(false)
        setImportModalOpen(false)
        return
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã
      const conflicts = await documentationApi.checkForConflicts(importData)
      
      if (conflicts.length > 0) {
        // –ï—Å—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥
        setImportConflicts(conflicts)
        setPendingImportData(importData)
        setConflictDialogVisible(true)
        setImportLoading(false)
        setImportModalOpen(false) // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∏–º–ø–æ—Ä—Ç–∞
      } else {
        // –ù–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ - –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ä–∞–∑—É
        const result = await documentationApi.importFromExcel(importData)

        if (result.errors.length > 0) {
          message.warning(`–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${result.results.length} –∑–∞–ø–∏—Å–µ–π, –æ—à–∏–±–æ–∫: ${result.errors.length}`)
        } else {
          message.success(`–£—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${result.results.length} –∑–∞–ø–∏—Å–µ–π`)
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        queryClient.invalidateQueries({ queryKey: ['documentation'] })
        setImportModalOpen(false)
        setFileList([])
        importForm.resetFields()
        setImportSelectedProjectId(null)
        setImportLoading(false)
      }
    } catch (error) {
      console.error('Import error:', error)
      message.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ —Ñ–∞–π–ª–∞')
      setImportLoading(false)
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
  const handleConflictResolution = async (resolutions: Map<number, ConflictResolution>) => {
    try {
      setResolvingConflicts(true)
      
      const result = await documentationApi.importFromExcelWithResolutions(
        pendingImportData,
        resolutions
      )

      let message_text = `–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: ${result.results.length} –∑–∞–ø–∏—Å–µ–π`
      if (result.skipped && result.skipped.length > 0) {
        message_text += `, –ø—Ä–æ–ø—É—â–µ–Ω–æ: ${result.skipped.length}`
      }
      if (result.errors.length > 0) {
        message_text += `, –æ—à–∏–±–æ–∫: ${result.errors.length}`
      }

      message.success(message_text)

      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
      queryClient.invalidateQueries({ queryKey: ['documentation'] })
      
      // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      setConflictDialogVisible(false)
      setImportConflicts([])
      setPendingImportData([])
      setFileList([])
      importForm.resetFields()
      setImportSelectedProjectId(null)
    } catch (error) {
      console.error('Error resolving conflicts:', error)
      message.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤')
    } finally {
      setResolvingConflicts(false)
    }
  }

  // –û—Ç–º–µ–Ω–∞ –∏–º–ø–æ—Ä—Ç–∞ –ø—Ä–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞—Ö
  const handleCancelConflictResolution = () => {
    setConflictDialogVisible(false)
    setImportConflicts([])
    setPendingImportData([])
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∏–º–ø–æ—Ä—Ç–∞
    setImportModalOpen(true)
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –≤ —Ñ–∞–π–ª–µ
  const handleDuplicateResolution = async () => {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–ª—è –≤—Å–µ—Ö –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –≤—ã–±—Ä–∞–Ω–∞ —Å—Ç—Ä–æ–∫–∞
      for (const duplicate of fileDuplicates) {
        if (!selectedDuplicates.has(duplicate.key)) {
          message.error('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–æ–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥—É–±–ª–∏–∫–∞—Ç–∞')
          return
        }
      }

      // –§–∏–ª—å—Ç—Ä—É–µ–º importData, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
      const indicesToKeep = new Set<number>()
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å—ã –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫ –∏–∑ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
      selectedDuplicates.forEach((selectedIndex) => {
        indicesToKeep.add(selectedIndex)
      })
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å—ã —Å—Ç—Ä–æ–∫, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –¥—É–±–ª–∏–∫–∞—Ç–∞–º–∏
      pendingImportData.forEach((_, index) => {
        const isDuplicate = fileDuplicates.some(dup => dup.indices.includes(index))
        if (!isDuplicate) {
          indicesToKeep.add(index)
        }
      })

      // –°–æ–∑–¥–∞–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ –¥–∞–Ω–Ω—ã—Ö
      const filteredData = pendingImportData.filter((_, index) => indicesToKeep.has(index))

      // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
      setDuplicateDialogVisible(false)
      setFileDuplicates([])
      setSelectedDuplicates(new Map())

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
      const conflicts = await documentationApi.checkForConflicts(filteredData)
      
      if (conflicts.length > 0) {
        // –ï—Å—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥
        setImportConflicts(conflicts)
        setPendingImportData(filteredData)
        setConflictDialogVisible(true)
      } else {
        // –ù–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ - –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ä–∞–∑—É
        const result = await documentationApi.importFromExcel(filteredData)

        if (result.errors.length > 0) {
          message.warning(`–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${result.results.length} –∑–∞–ø–∏—Å–µ–π, –æ—à–∏–±–æ–∫: ${result.errors.length}`)
        } else {
          message.success(`–£—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${result.results.length} –∑–∞–ø–∏—Å–µ–π`)
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        queryClient.invalidateQueries({ queryKey: ['documentation'] })
        setPendingImportData([])
        setFileList([])
        importForm.resetFields()
        setImportSelectedProjectId(null)
      }
    } catch (error) {
      console.error('Error resolving duplicates:', error)
      message.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤')
    }
  }

  // –û—Ç–º–µ–Ω–∞ –≤—ã–±–æ—Ä–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
  const handleCancelDuplicateResolution = () => {
    setDuplicateDialogVisible(false)
    setFileDuplicates([])
    setSelectedDuplicates(new Map())
    setPendingImportData([])
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∏–º–ø–æ—Ä—Ç–∞
    setImportModalOpen(true)
  }

  // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
  const handleApply = () => {
    setAppliedFilters(filters)
    setAddMode(false)
    setNewRows([])
    setSelectedVersions({}) // –û—á–∏—â–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –≤–µ—Ä—Å–∏–∏ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    setFiltersExpanded(false) // –°–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –±–ª–æ–∫ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø–æ—Å–ª–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
  }

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
  const handleAddRow = () => {
    const newRow = {
      id: `new-${Date.now()}`,
      documentation_id: '', // –ü—É—Å—Ç–æ–π UUID –¥–ª—è –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π
      stage: '–ü' as '–ü' | '–†', // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ü (–ø—Ä–æ–µ–∫—Ç)
      tag_id: null, // –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
      tag_name: '',
      tag_number: 0,
      project_code: '',
      project_name: '',
      version_count: 0,
      versions: [],
      comments: '',
      project_id: appliedFilters.project_id || null,
      block_id: appliedFilters.block_id || null,
      color: '' as RowColor,
      isNew: true,
      // –ü–æ–ª—è –¥–ª—è –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏
      new_version_number: 1,
      new_issue_date: '',
      new_file_url: '',
      new_status: 'not_filled' as DocumentationVersion['status'],
    }
    setNewRows([...newRows, newRow])
    setAddMode(true)
  }


  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π
  const handleSaveAll = async () => {
    try {
      console.log('Saving rows with appliedFilters:', appliedFilters)
      for (const row of newRows) {
        const tagId = tags.find(t => t.name === row.tag_name)?.id
        console.log('Saving row with project_id:', row.project_id, 'block_id:', row.block_id)
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –º–µ—Ç–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        await documentationApi.saveDocumentationComplete({
          code: row.project_code,
          stage: row.stage || '–ü',
          tagId,
          projectId: row.project_id || undefined,
          blockId: row.block_id || undefined,
          // color: row.color || undefined, // TODO: —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–ª–æ–Ω–∫–∏ –≤ –ë–î
          versionNumber: row.new_version_number,
          issueDate: row.new_issue_date,
          fileUrl: row.new_file_url,
          status: row.new_status || 'not_filled',
          comment: row.comments || undefined,
        })
      }
      message.success(`–£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${newRows.length}`)
      setNewRows([])
      setAddMode(false)
      queryClient.invalidateQueries({ queryKey: ['documentation'] })
    } catch (error) {
      console.error('Save all error:', error)
      message.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π')
    }
  }

  // –û—Ç–º–µ–Ω–∞ –≤—Å–µ—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
  const handleCancelAll = () => {
    setNewRows([])
    setAddMode(false)
  }


  // –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
  const tableData = useMemo(() => {
    return [...newRows, ...documentation]
  }, [newRows, documentation])

  return (
    <div style={{
      flex: 1,
      display: 'flex',
      flexDirection: 'column',
      overflow: 'hidden',
      minHeight: 0
    }}>
      <div style={{ flexShrink: 0, paddingBottom: 16 }}>
        <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: 12 }}>
          <Space align="center" size="middle">
            <Text style={{ fontSize: '16px' }}>–ü—Ä–æ–µ–∫—Ç:</Text>
            <Select
              placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç"
              style={{ width: 280 * scale }}
              size="large"
              value={filters.project_id}
              onChange={(value) => setFilters({ ...filters, project_id: value, block_id: undefined })}
              options={projects?.map((p) => ({
                value: p.id, 
                label: <span style={{ fontWeight: 'bold' }}>{p.name}</span> 
              })) ?? []}
              allowClear
              showSearch
              filterOption={(input, option) => {
                const label = option?.label
                if (!label) return false
                if (typeof label === 'object' && 'props' in label) {
                  const text = ((label as React.ReactElement).props as { children?: string })?.children || ''
                  if (typeof text === 'string') {
                    return text.toLowerCase().includes(input.toLowerCase())
                  }
                  return false
                }
                if (typeof label === 'string') {
                  return (label as string).toLowerCase().includes(input.toLowerCase())
                }
                return false
              }}
            />
            <Select
              style={{ width: 100 }}
              placeholder="–°—Ç–∞–¥–∏—è"
              allowClear
              size="large"
              value={filters.stage}
              onChange={(value) => setFilters({ ...filters, stage: value })}
              options={[
                { label: '–ü', value: DOCUMENT_STAGES.P },
                { label: '–†', value: DOCUMENT_STAGES.R },
              ]}
            />
            <Select
              style={{ width: 200 }}
              placeholder="–¢—ç–≥"
              allowClear
              showSearch
              filterOption={(input, option) => {
                const label = option?.label
                if (!label) return false
                if (typeof label === 'object' && 'props' in label) {
                  const text = ((label as React.ReactElement).props as { children?: string })?.children || ''
                  if (typeof text === 'string') {
                    return text.toLowerCase().includes(input.toLowerCase())
                  }
                  return false
                }
                return String(label).toLowerCase().includes(input.toLowerCase())
              }}
              size="large"
              value={filters.tag_id}
              onChange={(value) => setFilters({ ...filters, tag_id: value })}
              options={tags.map((t) => ({ label: t.name, value: t.id }))}
            />
            <Button 
              type="primary" 
              size="large"
              onClick={handleApply} 
              disabled={!filters.project_id}
            >
              –ü—Ä–∏–º–µ–Ω–∏—Ç—å
            </Button>
            <Badge 
              count={[filters.block_id, filters.status, filters.show_latest_only].filter(Boolean).length} 
              size="small"
              style={{ marginRight: '8px' }}
            >
              <Button
                type={filtersExpanded ? 'default' : 'text'}
                onClick={() => setFiltersExpanded(!filtersExpanded)}
                icon={
                  <span style={{ display: 'flex', alignItems: 'center', gap: '4px' }}>
                      <FilterOutlined style={{ fontSize: '16px', color: filtersExpanded ? '#a69ead' : undefined }} />
                      {filtersExpanded ?
                        <CaretUpFilled style={{ fontSize: '10px', color: '#a69ead' }} /> :
                        <CaretDownFilled style={{ fontSize: '10px' }} />
                    }
                  </span>
                }
              >
                –§–∏–ª—å—Ç—Ä—ã
              </Button>
            </Badge>
          </Space>
          <Space>
            {appliedFilters.project_id && !addMode && !Object.keys(editingRows).length && !deleteMode && (
              <Button
                type="primary"
                icon={<PlusOutlined />}
                onClick={handleAddRow}
              >
                –î–æ–±–∞–≤–∏—Ç—å
              </Button>
            )}
            {addMode && (
              <>
                <Button
                  type="primary"
                  icon={<SaveOutlined />}
                  onClick={handleSaveAll}
                  size="large"
                >
                  –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
                </Button>
                <Button
                  onClick={handleCancelAll}
                  size="large"
                >
                  –û—Ç–º–µ–Ω–∞
                </Button>
              </>
            )}
            {Object.keys(editingRows).length > 0 && (
              <>
                <Button 
                  type="primary"
                  icon={<SaveOutlined />}
                  onClick={async () => {
                    try {
                      // TODO: –î–æ–±–∞–≤–∏—Ç—å –º–∞—Å—Å–æ–≤–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ API
                      message.success(`–û–±–Ω–æ–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${Object.keys(editingRows).length}`)
                      setEditingRows({})
                      setEditingKey(null)
                      queryClient.invalidateQueries({ queryKey: ['documentation'] })
                    } catch {
                      message.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏')
                    }
                  }}
                >
                  –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
                </Button>
                <Button
                  onClick={() => {
                    setEditingRows({})
                    setEditingKey(null)
                  }}
                >
                  –û—Ç–º–µ–Ω–∞
                </Button>
              </>
            )}
            {!Object.keys(editingRows).length && appliedFilters.project_id && (
              <Button
                danger={deleteMode}
                icon={<DeleteOutlined />}
                onClick={() => {
                  if (deleteMode && selectedRowsForDelete.size > 0) {
                    Modal.confirm({
                      title: '–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏?',
                      content: `–ë—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${selectedRowsForDelete.size}`,
                      okText: '–£–¥–∞–ª–∏—Ç—å',
                      cancelText: '–û—Ç–º–µ–Ω–∞',
                      okButtonProps: { danger: true },
                      onOk: async () => {
                        // TODO: –î–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —É–¥–∞–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ API
                        message.success(`–£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${selectedRowsForDelete.size}`)
                        setSelectedRowsForDelete(new Set())
                        setDeleteMode(false)
                        queryClient.invalidateQueries({ queryKey: ['documentation'] })
                      }
                    })
                  } else {
                    setDeleteMode(!deleteMode)
                    setSelectedRowsForDelete(new Set())
                  }
                }}
                disabled={addMode}
              >
                {deleteMode && selectedRowsForDelete.size > 0 
                  ? `–£–¥–∞–ª–∏—Ç—å (${selectedRowsForDelete.size})`
                  : deleteMode 
                  ? '–í—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞' 
                  : '–£–¥–∞–ª–∏—Ç—å'}
              </Button>
            )}
            {deleteMode && selectedRowsForDelete.size === 0 && appliedFilters.project_id && (
              <Button
                onClick={() => {
                  setDeleteMode(false)
                  setSelectedRowsForDelete(new Set())
                }}
              >
                –û—Ç–º–µ–Ω–∞
              </Button>
            )}
            <Button
              icon={<UploadOutlined />}
              onClick={() => setImportModalOpen(true)}
              disabled={deleteMode || addMode}
            >
              –ò–º–ø–æ—Ä—Ç Excel
            </Button>
          </Space>
        </div>

        {/* –†–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã */}
        {filtersExpanded && (
          <div style={{ 
            marginBottom: 16, 
            padding: '16px',
            backgroundColor: '#f5f5f5',
            borderRadius: '8px'
          }}>
            <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', flexWrap: 'wrap', gap: '8px' }}>
              <Space wrap>
                <Select
                  style={{ width: 200 }}
                  placeholder="–ö–æ—Ä–ø—É—Å"
                  allowClear
                  showSearch
              filterOption={(input, option) => {
                const label = option?.label
                if (!label) return false
                if (typeof label === 'object' && 'props' in label) {
                  const text = ((label as React.ReactElement).props as { children?: string })?.children || ''
                  if (typeof text === 'string') {
                    return text.toLowerCase().includes(input.toLowerCase())
                  }
                  return false
                }
                return String(label).toLowerCase().includes(input.toLowerCase())
              }}
                  disabled={!filters.project_id}
                  value={filters.block_id}
                  onChange={(value) => setFilters({ ...filters, block_id: value })}
                  options={blocks.map((b) => ({ label: b.name, value: b.id }))}
                />
                <Select
                  style={{ width: 200 }}
                  placeholder="–°—Ç–∞—Ç—É—Å"
                  allowClear
                  showSearch
              filterOption={(input, option) => {
                const label = option?.label
                if (!label) return false
                if (typeof label === 'object' && 'props' in label) {
                  const text = ((label as React.ReactElement).props as { children?: string })?.children || ''
                  if (typeof text === 'string') {
                    return text.toLowerCase().includes(input.toLowerCase())
                  }
                  return false
                }
                return String(label).toLowerCase().includes(input.toLowerCase())
              }}
                  value={filters.status}
                  onChange={(value) => setFilters({ ...filters, status: value })}
                  options={[
                    { label: '–î–∞–Ω–Ω—ã–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –ø–æ –ø–µ—Ä–µ—Å—á–µ—Ç—É –†–î', value: 'filled_recalc' },
                    { label: '–î–∞–Ω–Ω—ã–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –ø–æ —Å–ø–µ–∫–µ –†–î', value: 'filled_spec' },
                    { label: '–î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã', value: 'not_filled' },
                    { label: '–°–æ–∑–¥–∞–Ω—ã –í–û–†', value: 'vor_created' },
                  ]}
                />
              </Space>
              <Button
                icon={<SettingOutlined />}
                onClick={() => setSettingsDrawerOpen(true)}
              >
                –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–æ–ª–±—Ü–æ–≤
              </Button>
            </div>
          </div>
        )}
      </div>

      {/* –¢–∞–±–ª–∏—Ü–∞ */}
      <div style={{ flex: 1, overflow: 'auto', minHeight: 0 }}>
        {!appliedFilters.project_id ? (
          <Empty
            description="–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"
            style={{ marginTop: 48 }}
          />
        ) : (
          <Table
            columns={columns}
            dataSource={tableData}
            rowKey="id"
            loading={isLoading}
            pagination={{
              showSizeChanger: true,
              showTotal: (total) => `–í—Å–µ–≥–æ: ${total}`,
              defaultPageSize: pageSize,
              pageSizeOptions: ['10', '20', '50', '100', '200', '500'],
              onShowSizeChange: (_, size) => {
                setPageSize(size)
                localStorage.setItem('documentation_page_size', size.toString())
              },
            }}
            sticky
            style={{ height: '100%' }}
            scroll={{
              x: 'max-content',
              y: '100%'
            }}
          // TODO: —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–ª–æ–Ω–∫–∏ color –≤ –ë–î
          /*onRow={(record: DocumentationTableRow) => ({
            style: {
              backgroundColor: record.color ? colorMap[record.color as RowColor] : undefined,
            },
          })}*/
        />
      )}
      </div>

      {/* Drawer –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å—Ç–æ–ª–±—Ü–æ–≤ */}
      <Drawer
        title="–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–æ–ª–±—Ü–æ–≤"
        placement="right"
        onClose={() => setSettingsDrawerOpen(false)}
        open={settingsDrawerOpen}
        width={350}
      >
        <div style={{ marginBottom: 16, display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
          <Checkbox
            checked={allColumnsForSettings.every(col => columnVisibility[col.key] !== false)}
            indeterminate={allColumnsForSettings.some(col => columnVisibility[col.key]) && !allColumnsForSettings.every(col => columnVisibility[col.key] !== false)}
            onChange={(e) => selectAllColumns(e.target.checked, allColumnsForSettings)}
          >
            –í—ã–¥–µ–ª–∏—Ç—å –≤—Å–µ
          </Checkbox>
          <Button
            type="link"
            onClick={() => resetToDefaults(allColumnsForSettings)}
          >
            –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
          </Button>
        </div>
        <List
          dataSource={columnOrder.map(key => {
            const col = allColumnsForSettings.find(c => c.key === key)
            return col ? { ...col, visible: columnVisibility[key] !== false } : null
          }).filter(Boolean)}
          renderItem={(item, index) => item && (
            <List.Item
              actions={[
                <Button
                  key="up"
                  type="text"
                  icon={<ArrowUpOutlined />}
                  onClick={() => moveColumn(item.key, 'up')}
                  disabled={index === 0}
                  size="small"
                />,
                <Button
                  key="down"
                  type="text"
                  icon={<ArrowDownOutlined />}
                  onClick={() => moveColumn(item.key, 'down')}
                  disabled={index === columnOrder.length - 1}
                  size="small"
                />
              ]}
            >
              <Checkbox
                checked={item.visible}
                onChange={() => toggleColumnVisibility(item.key)}
              >
                {item.title}
              </Checkbox>
            </List.Item>
          )}
        />
      </Drawer>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∏–º–ø–æ—Ä—Ç–∞ */}
      <Modal
        title="–ò–º–ø–æ—Ä—Ç –∏–∑ Excel"
        open={importModalOpen}
        onOk={handleImportExcel}
        onCancel={() => {
          setImportModalOpen(false)
          setFileList([])
          importForm.resetFields()
          setImportSelectedProjectId(null)
        }}
        confirmLoading={importLoading}
        okText="–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å"
        cancelText="–û—Ç–º–µ–Ω–∞"
        width={600}
      >
        <Form
          form={importForm}
          layout="vertical"
          initialValues={{
            stage: DOCUMENT_STAGES.R,
          }}
        >
          <Form.Item
            name="project_id"
            label="–ü—Ä–æ–µ–∫—Ç"
            rules={[{ required: true, message: '–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç' }]}
          >
            <Select
              placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç"
              options={projects?.map((p) => ({ 
                value: p.id, 
                label: p.name,
              })) ?? []}
              showSearch
              filterOption={(input, option) => {
                const label = option?.label
                if (typeof label === 'string') {
                  return label.toLowerCase().includes(input.toLowerCase())
                }
                return false
              }}
              onChange={(value) => {
                setImportSelectedProjectId(value)
                // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫–æ—Ä–ø—É—Å –ø—Ä–∏ —Å–º–µ–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞
                importForm.setFieldValue('block_id', undefined)
              }}
            />
          </Form.Item>

          <Form.Item
            name="block_id"
            label="–ö–æ—Ä–ø—É—Å"
            rules={[{ required: false }]}
          >
            <Select
              placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä–ø—É—Å (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)"
              options={importBlocks?.map((b) => ({ 
                value: b.id, 
                label: b.name,
              })) ?? []}
              allowClear
              disabled={!importSelectedProjectId}
              showSearch
              filterOption={(input, option) => {
                const label = option?.label
                if (typeof label === 'string') {
                  return label.toLowerCase().includes(input.toLowerCase())
                }
                return false
              }}
            />
          </Form.Item>

          <Form.Item
            name="stage"
            label="–¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞"
            rules={[{ required: true, message: '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞' }]}
          >
            <Select
              options={[
                { label: '–ü (–ü—Ä–æ–µ–∫—Ç)', value: DOCUMENT_STAGES.P },
                { label: '–† (–†–∞–±–æ—á–∏–π)', value: DOCUMENT_STAGES.R },
              ]}
            />
          </Form.Item>

          <Form.Item label="–§–∞–π–ª –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞">
            <Upload.Dragger
              fileList={fileList}
              onChange={({ fileList }) => setFileList(fileList.slice(-1))}
              beforeUpload={() => false}
              accept=".xlsx,.xls"
              maxCount={1}
            >
              <p className="ant-upload-drag-icon">
                <InboxOutlined />
              </p>
              <p className="ant-upload-text">–ù–∞–∂–º–∏—Ç–µ –∏–ª–∏ –ø–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏</p>
              <p className="ant-upload-hint">
                –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ñ–∞–π–ª—ã Excel (.xlsx, .xls)
                <br />
                –§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å—Ç–æ–ª–±—Ü—ã: –†–∞–∑–¥–µ–ª, –®–∏—Ñ—Ä –ø—Ä–æ–µ–∫—Ç–∞, –ù–æ–º–µ—Ä –≤–µ—Ä—Å–∏–∏, –î–∞—Ç–∞ –≤—ã–¥–∞—á–∏ –≤–µ—Ä—Å–∏–∏, –°—Å—ã–ª–∫–∞
              </p>
            </Upload.Dragger>
          </Form.Item>
        </Form>
      </Modal>

      {/* –î–∏–∞–ª–æ–≥ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ */}
      <ConflictResolutionDialog
        visible={conflictDialogVisible}
        conflicts={importConflicts}
        onResolve={handleConflictResolution}
        onCancel={handleCancelConflictResolution}
        loading={resolvingConflicts}
      />

      {/* –î–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –≤ —Ñ–∞–π–ª–µ */}
      <Modal
        title="–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –¥—É–±–ª–∏–∫–∞—Ç—ã –≤ —Ñ–∞–π–ª–µ –∏–º–ø–æ—Ä—Ç–∞"
        open={duplicateDialogVisible}
        onOk={handleDuplicateResolution}
        onCancel={handleCancelDuplicateResolution}
        width={1200}
        okText="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"
        cancelText="–û—Ç–º–µ–Ω–∞"
      >
        <div style={{ marginBottom: 16 }}>
          <Text>
            –í —Ñ–∞–π–ª–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Å—Ç—Ä–æ–∫–∏ —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º —Å–æ—á–µ—Ç–∞–Ω–∏–µ–º —à–∏—Ñ—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏ –≤–µ—Ä—Å–∏–∏.
            –í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫—É—é —Å—Ç—Ä–æ–∫—É –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥—É–±–ª–∏–∫–∞—Ç–∞:
          </Text>
        </div>
        {fileDuplicates.map((duplicate) => {
          const [code, version] = duplicate.key.split('_')
          return (
            <div key={duplicate.key} style={{ marginBottom: 24, border: '1px solid #d9d9d9', padding: 16, borderRadius: 4 }}>
              <Title level={5}>–®–∏—Ñ—Ä: {code}, –í–µ—Ä—Å–∏—è: {version}</Title>
              <Radio.Group
                value={selectedDuplicates.get(duplicate.key)}
                onChange={(e) => {
                  const newSelected = new Map(selectedDuplicates)
                  newSelected.set(duplicate.key, e.target.value)
                  setSelectedDuplicates(newSelected)
                }}
                style={{ width: '100%' }}
              >
                <Table
                  dataSource={duplicate.rows.map((row, idx) => ({
                    key: duplicate.indices[idx],
                    rowIndex: duplicate.indices[idx],
                    ...row
                  }))}
                  columns={[
                    {
                      title: '–í—ã–±—Ä–∞—Ç—å',
                      dataIndex: 'rowIndex',
                      key: 'select',
                      width: 80,
                      align: 'center',
                      render: (rowIndex: number) => (
                        <Radio value={rowIndex} />
                      )
                    },
                    {
                      title: '‚Ññ —Å—Ç—Ä–æ–∫–∏',
                      dataIndex: 'rowIndex',
                      key: 'rowIndex',
                      width: 90,
                      render: (index: number) => `${index + 1}`
                    },
                    {
                      title: '–†–∞–∑–¥–µ–ª',
                      dataIndex: 'tag',
                      key: 'tag',
                      width: 200,
                      render: (text: string) => text || '-'
                    },
                    {
                      title: '–®–∏—Ñ—Ä –ø—Ä–æ–µ–∫—Ç–∞',
                      dataIndex: 'code',
                      key: 'code',
                      width: 150,
                      render: (text: string) => text || '-'
                    },
                    {
                      title: '–í–µ—Ä—Å–∏—è',
                      dataIndex: 'version_number',
                      key: 'version_number',
                      width: 80,
                      align: 'center'
                    },
                    {
                      title: '–î–∞—Ç–∞ –≤—ã–¥–∞—á–∏',
                      dataIndex: 'issue_date',
                      key: 'issue_date',
                      width: 120,
                      render: (date: string) => date ? formatDate(date) : '-'
                    },
                    {
                      title: '–°—Å—ã–ª–∫–∞ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç',
                      dataIndex: 'file_url',
                      key: 'file_url',
                      width: 150,
                      ellipsis: true,
                      render: (url: string) => url ? (
                        <Tooltip title={url}>
                          <a href={url} target="_blank" rel="noopener noreferrer">
                            –û—Ç–∫—Ä—ã—Ç—å
                          </a>
                        </Tooltip>
                      ) : '-'
                    },
                    {
                      title: '–°—Ç–∞–¥–∏—è',
                      dataIndex: 'stage',
                      key: 'stage',
                      width: 80,
                      align: 'center',
                      render: (stage: string) => stage || '–ü'
                    }
                  ]}
                  pagination={false}
                  size="small"
                  bordered
                  style={{ marginTop: 8 }}
                />
              </Radio.Group>
            </div>
          )
        })}
      </Modal>
    </div>
  )
}